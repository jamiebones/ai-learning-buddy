services:
  postgres:
    build:
      image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-studybuddy}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/backend
      - ./backend/chroma_db:/backend/chroma_db
      - backend_venv:/backend/.venv
    ports:
      - "8001:8000"
      - "5678:5678"
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-studybuddy}
      - SECRET_KEY=${SECRET_KEY:-devkey}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-dummy-key}
      - LILYPAD_API_TOKEN=${LILYPAD_API_TOKEN:-sk-lilypad-api-00000000000000000000000000000000}
      - ENVIRONMENT=development
      - DEBUG=True
      - PORT=8000
      - WORKERS=1
      - ENFORCE_HTTPS=false
      - ENABLE_RATE_LIMIT=false
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_TIMEFRAME=60
      - ALLOWED_HOSTS=*
    # Use python -m to run the module properly with debug commands
    command: sh -c "python -c 'import sys; print(sys.path)' && ls -la /backend && python -m app.main"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001/api
      - NODE_ENV=development
    command: npm run dev

volumes:
  postgres_data:
  backend_venv:
